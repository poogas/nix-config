{
  # --- Описание флейка ---
  # Простое текстовое описание того, что делает этот флейк. Полезно для других людей и инструментов.
  description = "NixOS configuration";

  # --- Входы (Inputs) ---
  # 'Входы' — это все внешние зависимости нашей системы. Представьте, что это "ингредиенты",
  # которые мы скачиваем из интернета для приготовления нашего "блюда" (операционной системы).
  inputs = {
    # 1. Главный набор пакетов NixOS. Это самый важный ингредиент.
    # Мы используем ветку "nixos-unstable", чтобы получать самые свежие пакеты и обновления.
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    # 2. Инструмент для управления пользовательскими настройками ("дотфайлами").
    home-manager = {
      url = "github:nix-community/home-manager";
      # Эта важная строка гарантирует, что Home Manager будет использовать ту же самую
      # версию nixpkgs, что и вся наша система. Это предотвращает множество проблем
      # с несовместимостью пакетов.
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # 3. Пакет для оконного менеджера Hyprland, напрямую от разработчиков.
    # Это позволяет нам использовать самую последнюю версию Hyprland.
    hyprland.url = "github:hyprwm/Hyprland";

    ax-shell = {
      url = "github:poogas/Ax-Shell/dev";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    play-nix.url = "github:TophC7/play.nix";

    chaotic = {
      url = "github:chaotic-cx/nyx/nyxpkgs-unstable";
    };

  };

  # --- Выходы (Outputs) ---
  # 'Выходы' — это то, что наш флейк "производит" или "собирает".
  # В нашем случае, он производит конфигурации операционных систем.
  # Функция `{ self, nixpkgs, ... }@inputs:` принимает все наши 'входы' в качестве аргументов.
  # `@inputs` — это трюк, который позволяет собрать все входы в одну переменную `inputs`.
  outputs = { self, nixpkgs, ... }@inputs:
    # Блок `let...in` позволяет нам определить локальные переменные, которые мы будем
    # использовать ниже. Это помогает сделать код более чистым.
    let
      # --- Наша "База данных" компьютеров ---
      # Здесь мы описываем все компьютеры, которыми управляет этот флейк.
      # Ключ ("qwerty") — это уникальное имя конфигурации.
      # Значение — это набор настроек для этого конкретного компьютера.
      # Если у вас появится ноутбук, вы можете просто добавить сюда новую запись,
      # например, "my-laptop" = { ... };
      nix-hosts = {
        "qwerty" = {
          username = "qwerty";
          system = "x86_64-linux";
          stateVersion = "25.05";
        };
      };

      # --- Функция-"Фабрика" для сборки системы ---
      # Это наша главная функция-помощник. Она принимает имя хоста (hostname) и его
      # конфигурацию (config) и "собирает" из них полноценную систему NixOS.
      makeSystem = hostname: config:
        # Это основная функция из nixpkgs, которая и создает систему.
        nixpkgs.lib.nixosSystem {
          # Указываем архитектуру системы (например, "x86_64-linux").
          system = config.system;

          # --- "Волшебные" аргументы для наших модулей ---
          # `specialArgs` — это набор переменных, который NixOS "прокинет"
          # в КАЖДЫЙ наш модуль. Это невероятно мощный механизм.
          #
          # Как работает строка `{ inherit inputs hostname; } // config;`:
          # 1. `{ inherit inputs hostname; }` создает набор: { inputs = inputs; hostname = hostname; }
          # 2. `config` — это набор настроек для хоста, например: { username = "qwerty"; system = ...; }
          # 3. Оператор `//` объединяет эти два набора. Правый "побеждает" в случае совпадений.
          #
          # В итоге для хоста "qwerty" `specialArgs` будет равен:
          # {
          #   inputs = <...>;
          #   hostname = "qwerty";
          #   username = "qwerty";
          #   system = "x86_64-linux";
          #   stateVersion = "25.05";
          # }
          #
          # Самое главное: теперь в любом нашем `.nix` файле в `modules` мы можем
          # просто написать ` { username, inputs, ... }: ` в шапке, и NixOS
          # автоматически подставит туда нужные значения!
          specialArgs = { inherit inputs hostname; } // config;

          # --- Список модулей конфигурации ---
          # Здесь мы перечисляем все "части", из которых будет состоять наша система.
          # NixOS возьмет все эти файлы, объединит их в одну большую конфигурацию и соберет систему.
          modules = [
            # Основной файл с системными настройками (NixOS).
            ./system/configuration.nix

            # Наш кастомный модуль для интеграции Home Manager.
	    ./system/modules/home-manager.nix
          ];
        };
    in # Конец блока `let`.
    {
      # --- Запуск конвейера ---
      # Здесь мы говорим Nix'у, что наш флейк производит конфигурации NixOS.
      # Функция `lib.mapAttrs` работает как цикл:
      # 1. Она берет нашу "базу данных" `nix-hosts`.
      # 2. Для КАЖДОЙ записи в ней (в нашем случае, только для "qwerty") она вызывает
      #    нашу функцию-"фабрику" `makeSystem`.
      # 3. В итоге она создает набор готовых к сборке конфигураций.
      nixosConfigurations = nixpkgs.lib.mapAttrs makeSystem nix-hosts;
    };
}
